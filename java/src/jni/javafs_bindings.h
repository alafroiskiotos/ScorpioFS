/**
 * javafs_bindings.h - autogenerated C <-> Java bindings
 */

#include <jni.h>


/**
 * structure with a reference to fuse.FuseGetattr java class and cached field & method IDs
 */
typedef struct _jclass_fuse_FuseGetattr
{
   // a pointer to globaly referenced Java class
   jclass class;

   // cached instance field IDs
   struct
   {
      jfieldID inode;
      jfieldID nlink;
      jfieldID uid;
      jfieldID gid;
      jfieldID rdev;
      jfieldID size;
      jfieldID blocks;
      jfieldID atime;
      jfieldID mtime;
      jfieldID ctime;
      jfieldID mode;

   } field;

   // cached constructor IDs
   struct
   {
      jmethodID new;

   } constructor;

   // cached instance method IDs
   struct
   {
      jmethodID V__set__JIIIIIJJIII;
      jmethodID Ljava_lang_Object___clone;
      jmethodID Ljava_lang_String___toString;
      jmethodID V__wait__J;
      jmethodID V__wait__JI;
      jmethodID V__wait;
      jmethodID I__hashCode;
      jmethodID Ljava_lang_Class___getClass;
      jmethodID Z__equals__Ljava_lang_Object_;
      jmethodID V__notify;
      jmethodID V__notifyAll;

   } method;

} jclass_fuse_FuseGetattr;

// free structure
void free_jclass_fuse_FuseGetattr(JNIEnv *env, jclass_fuse_FuseGetattr *fuse_FuseGetattr);

// alloc structure
jclass_fuse_FuseGetattr *alloc_jclass_fuse_FuseGetattr(JNIEnv *env);


/**
 * structure with a reference to fuse.FuseFSDirEnt java class and cached field & method IDs
 */
typedef struct _jclass_fuse_FuseFSDirEnt
{
   // a pointer to globaly referenced Java class
   jclass class;

   // cached instance field IDs
   struct
   {
      jfieldID name;
      jfieldID inode;
      jfieldID mode;

   } field;

   // cached constructor IDs
   struct
   {
      jmethodID new;

   } constructor;

   // cached instance method IDs
   struct
   {
      jmethodID Ljava_lang_Object___clone;
      jmethodID Ljava_lang_String___toString;
      jmethodID V__wait__J;
      jmethodID V__wait__JI;
      jmethodID V__wait;
      jmethodID I__hashCode;
      jmethodID Ljava_lang_Class___getClass;
      jmethodID Z__equals__Ljava_lang_Object_;
      jmethodID V__notify;
      jmethodID V__notifyAll;

   } method;

} jclass_fuse_FuseFSDirEnt;

// free structure
void free_jclass_fuse_FuseFSDirEnt(JNIEnv *env, jclass_fuse_FuseFSDirEnt *fuse_FuseFSDirEnt);

// alloc structure
jclass_fuse_FuseFSDirEnt *alloc_jclass_fuse_FuseFSDirEnt(JNIEnv *env);


/**
 * structure with a reference to fuse.FuseFSDirFiller java class and cached field & method IDs
 */
typedef struct _jclass_fuse_FuseFSDirFiller
{
   // a pointer to globaly referenced Java class
   jclass class;

   // cached constructor IDs
   struct
   {
      jmethodID new;

   } constructor;

   // cached instance method IDs
   struct
   {
      jmethodID V__add__Ljava_lang_String_JI;
      jmethodID Ljava_lang_String___toString;
      jmethodID V__setCharset__Ljava_nio_charset_Charset_;
      jmethodID Z__add__Ljava_lang_Object_;
      jmethodID V__add__ILjava_lang_Object_;
      jmethodID Ljava_lang_Object___get__I;
      jmethodID Ljava_lang_Object___clone;
      jmethodID I__indexOf__Ljava_lang_Object_;
      jmethodID V__clear;
      jmethodID Z__contains__Ljava_lang_Object_;
      jmethodID Z__isEmpty;
      jmethodID I__lastIndexOf__Ljava_lang_Object_;
      jmethodID Z__addAll__Ljava_util_Collection_;
      jmethodID Z__addAll__ILjava_util_Collection_;
      jmethodID I__size;
      jmethodID _Ljava_lang_Object___toArray;
      jmethodID _Ljava_lang_Object___toArray___Ljava_lang_Object_;
      jmethodID Ljava_lang_Object___remove__I;
      jmethodID Z__remove__Ljava_lang_Object_;
      jmethodID Ljava_lang_Object___set__ILjava_lang_Object_;
      jmethodID V__ensureCapacity__I;
      jmethodID V__trimToSize;
      jmethodID I__hashCode;
      jmethodID Z__equals__Ljava_lang_Object_;
      jmethodID Ljava_util_Iterator___iterator;
      jmethodID Ljava_util_List___subList__II;
      jmethodID Ljava_util_ListIterator___listIterator;
      jmethodID Ljava_util_ListIterator___listIterator__I;
      jmethodID Z__containsAll__Ljava_util_Collection_;
      jmethodID Z__removeAll__Ljava_util_Collection_;
      jmethodID Z__retainAll__Ljava_util_Collection_;
      jmethodID V__wait__J;
      jmethodID V__wait__JI;
      jmethodID V__wait;
      jmethodID Ljava_lang_Class___getClass;
      jmethodID V__notify;
      jmethodID V__notifyAll;

   } method;

} jclass_fuse_FuseFSDirFiller;

// free structure
void free_jclass_fuse_FuseFSDirFiller(JNIEnv *env, jclass_fuse_FuseFSDirFiller *fuse_FuseFSDirFiller);

// alloc structure
jclass_fuse_FuseFSDirFiller *alloc_jclass_fuse_FuseFSDirFiller(JNIEnv *env);


/**
 * structure with a reference to fuse.FuseStatfs java class and cached field & method IDs
 */
typedef struct _jclass_fuse_FuseStatfs
{
   // a pointer to globaly referenced Java class
   jclass class;

   // cached instance field IDs
   struct
   {
      jfieldID blockSize;
      jfieldID blocks;
      jfieldID blocksFree;
      jfieldID blocksAvail;
      jfieldID files;
      jfieldID filesFree;
      jfieldID namelen;

   } field;

   // cached constructor IDs
   struct
   {
      jmethodID new;

   } constructor;

   // cached instance method IDs
   struct
   {
      jmethodID V__set__IIIIIII;
      jmethodID Ljava_lang_Object___clone;
      jmethodID Ljava_lang_String___toString;
      jmethodID V__wait__J;
      jmethodID V__wait__JI;
      jmethodID V__wait;
      jmethodID I__hashCode;
      jmethodID Ljava_lang_Class___getClass;
      jmethodID Z__equals__Ljava_lang_Object_;
      jmethodID V__notify;
      jmethodID V__notifyAll;

   } method;

} jclass_fuse_FuseStatfs;

// free structure
void free_jclass_fuse_FuseStatfs(JNIEnv *env, jclass_fuse_FuseStatfs *fuse_FuseStatfs);

// alloc structure
jclass_fuse_FuseStatfs *alloc_jclass_fuse_FuseStatfs(JNIEnv *env);


/**
 * structure with a reference to fuse.FuseSize java class and cached field & method IDs
 */
typedef struct _jclass_fuse_FuseSize
{
   // a pointer to globaly referenced Java class
   jclass class;

   // cached instance field IDs
   struct
   {
      jfieldID size;

   } field;

   // cached constructor IDs
   struct
   {
      jmethodID new;

   } constructor;

   // cached instance method IDs
   struct
   {
      jmethodID V__setSize__I;
      jmethodID Ljava_lang_Object___clone;
      jmethodID Ljava_lang_String___toString;
      jmethodID V__wait__J;
      jmethodID V__wait__JI;
      jmethodID V__wait;
      jmethodID I__hashCode;
      jmethodID Ljava_lang_Class___getClass;
      jmethodID Z__equals__Ljava_lang_Object_;
      jmethodID V__notify;
      jmethodID V__notifyAll;

   } method;

} jclass_fuse_FuseSize;

// free structure
void free_jclass_fuse_FuseSize(JNIEnv *env, jclass_fuse_FuseSize *fuse_FuseSize);

// alloc structure
jclass_fuse_FuseSize *alloc_jclass_fuse_FuseSize(JNIEnv *env);


/**
 * structure with a reference to fuse.FuseOpen java class and cached field & method IDs
 */
typedef struct _jclass_fuse_FuseOpen
{
   // a pointer to globaly referenced Java class
   jclass class;

   // cached instance field IDs
   struct
   {
      jfieldID fh;
      jfieldID directIO;
      jfieldID keepCache;

   } field;

   // cached constructor IDs
   struct
   {
      jmethodID new;

   } constructor;

   // cached instance method IDs
   struct
   {
      jmethodID V__setFh__Ljava_lang_Object_;
      jmethodID Z__isDirectIO;
      jmethodID V__setDirectIO__Z;
      jmethodID Z__isKeepCache;
      jmethodID V__setKeepCache__Z;
      jmethodID Ljava_lang_Object___clone;
      jmethodID Ljava_lang_String___toString;
      jmethodID V__wait__J;
      jmethodID V__wait__JI;
      jmethodID V__wait;
      jmethodID I__hashCode;
      jmethodID Ljava_lang_Class___getClass;
      jmethodID Z__equals__Ljava_lang_Object_;
      jmethodID V__notify;
      jmethodID V__notifyAll;

   } method;

} jclass_fuse_FuseOpen;

// free structure
void free_jclass_fuse_FuseOpen(JNIEnv *env, jclass_fuse_FuseOpen *fuse_FuseOpen);

// alloc structure
jclass_fuse_FuseOpen *alloc_jclass_fuse_FuseOpen(JNIEnv *env);


/**
 * structure with a reference to fuse.FuseContext java class and cached field & method IDs
 */
typedef struct _jclass_fuse_FuseContext
{
   // a pointer to globaly referenced Java class
   jclass class;

   // cached instance field IDs
   struct
   {
      jfieldID uid;
      jfieldID gid;
      jfieldID pid;

   } field;

   // cached static method IDs
   struct
   {
      jmethodID Lfuse_FuseContext___get;

   } static_method;

   // cached instance method IDs
   struct
   {
      jmethodID Ljava_lang_Object___clone;
      jmethodID Ljava_lang_String___toString;
      jmethodID V__wait__J;
      jmethodID V__wait__JI;
      jmethodID V__wait;
      jmethodID I__hashCode;
      jmethodID Ljava_lang_Class___getClass;
      jmethodID Z__equals__Ljava_lang_Object_;
      jmethodID V__notify;
      jmethodID V__notifyAll;

   } method;

} jclass_fuse_FuseContext;

// free structure
void free_jclass_fuse_FuseContext(JNIEnv *env, jclass_fuse_FuseContext *fuse_FuseContext);

// alloc structure
jclass_fuse_FuseContext *alloc_jclass_fuse_FuseContext(JNIEnv *env);


/**
 * structure with a reference to fuse.FuseFS java class and cached field & method IDs
 */
typedef struct _jclass_fuse_FuseFS
{
   // a pointer to globaly referenced Java class
   jclass class;

   // cached instance method IDs
   struct
   {
      jmethodID I__write__Ljava_nio_ByteBuffer_Ljava_lang_Object_ZLjava_nio_ByteBuffer_J;
      jmethodID I__flush__Ljava_nio_ByteBuffer_Ljava_lang_Object_;
      jmethodID I__read__Ljava_nio_ByteBuffer_Ljava_lang_Object_Ljava_nio_ByteBuffer_J;
      jmethodID I__open__Ljava_nio_ByteBuffer_ILfuse_FuseOpenSetter_;
      jmethodID I__mkdir__Ljava_nio_ByteBuffer_I;
      jmethodID I__rename__Ljava_nio_ByteBuffer_Ljava_nio_ByteBuffer_;
      jmethodID I__release__Ljava_nio_ByteBuffer_Ljava_lang_Object_I;
      jmethodID I__getattr__Ljava_nio_ByteBuffer_Lfuse_FuseGetattrSetter_;
      jmethodID I__readlink__Ljava_nio_ByteBuffer_Ljava_nio_ByteBuffer_;
      jmethodID I__getdir__Ljava_nio_ByteBuffer_Lfuse_FuseFSDirFiller_;
      jmethodID I__mknod__Ljava_nio_ByteBuffer_II;
      jmethodID I__unlink__Ljava_nio_ByteBuffer_;
      jmethodID I__rmdir__Ljava_nio_ByteBuffer_;
      jmethodID I__symlink__Ljava_nio_ByteBuffer_Ljava_nio_ByteBuffer_;
      jmethodID I__link__Ljava_nio_ByteBuffer_Ljava_nio_ByteBuffer_;
      jmethodID I__chmod__Ljava_nio_ByteBuffer_I;
      jmethodID I__chown__Ljava_nio_ByteBuffer_II;
      jmethodID I__truncate__Ljava_nio_ByteBuffer_J;
      jmethodID I__utime__Ljava_nio_ByteBuffer_II;
      jmethodID I__statfs__Lfuse_FuseStatfsSetter_;
      jmethodID I__fsync__Ljava_nio_ByteBuffer_Ljava_lang_Object_Z;
      jmethodID I__setxattr__Ljava_nio_ByteBuffer_Ljava_nio_ByteBuffer_Ljava_nio_ByteBuffer_I;
      jmethodID I__getxattrsize__Ljava_nio_ByteBuffer_Ljava_nio_ByteBuffer_Lfuse_FuseSizeSetter_;
      jmethodID I__getxattr__Ljava_nio_ByteBuffer_Ljava_nio_ByteBuffer_Ljava_nio_ByteBuffer_;
      jmethodID I__listxattrsize__Ljava_nio_ByteBuffer_Lfuse_FuseSizeSetter_;
      jmethodID I__listxattr__Ljava_nio_ByteBuffer_Ljava_nio_ByteBuffer_;
      jmethodID I__removexattr__Ljava_nio_ByteBuffer_Ljava_nio_ByteBuffer_;

   } method;

} jclass_fuse_FuseFS;

// free structure
void free_jclass_fuse_FuseFS(JNIEnv *env, jclass_fuse_FuseFS *fuse_FuseFS);

// alloc structure
jclass_fuse_FuseFS *alloc_jclass_fuse_FuseFS(JNIEnv *env);


/**
 * structure with a reference to java.nio.ByteBuffer java class and cached field & method IDs
 */
typedef struct _jclass_java_nio_ByteBuffer
{
   // a pointer to globaly referenced Java class
   jclass class;

   // cached static method IDs
   struct
   {
      jmethodID Ljava_nio_ByteBuffer___wrap___BII;
      jmethodID Ljava_nio_ByteBuffer___wrap___B;
      jmethodID Ljava_nio_ByteBuffer___allocate__I;
      jmethodID Ljava_nio_ByteBuffer___allocateDirect__I;

   } static_method;

   // cached instance method IDs
   struct
   {
      jmethodID B__get;
      jmethodID B__get__I;
      jmethodID Ljava_nio_ByteBuffer___get___BII;
      jmethodID Ljava_nio_ByteBuffer___get___B;
      jmethodID Ljava_nio_ByteBuffer___put__B;
      jmethodID Ljava_nio_ByteBuffer___put__IB;
      jmethodID Ljava_nio_ByteBuffer___put__Ljava_nio_ByteBuffer_;
      jmethodID Ljava_nio_ByteBuffer___put___BII;
      jmethodID Ljava_nio_ByteBuffer___put___B;
      jmethodID I__hashCode;
      jmethodID I__compareTo__Ljava_nio_ByteBuffer_;
      jmethodID I__compareTo__Ljava_lang_Object_;
      jmethodID S__getShort;
      jmethodID S__getShort__I;
      jmethodID Ljava_nio_ByteBuffer___putShort__S;
      jmethodID Ljava_nio_ByteBuffer___putShort__IS;
      jmethodID C__getChar;
      jmethodID C__getChar__I;
      jmethodID Ljava_nio_ByteBuffer___putChar__C;
      jmethodID Ljava_nio_ByteBuffer___putChar__IC;
      jmethodID I__getInt;
      jmethodID I__getInt__I;
      jmethodID Ljava_nio_ByteBuffer___putInt__I;
      jmethodID Ljava_nio_ByteBuffer___putInt__II;
      jmethodID J__getLong;
      jmethodID J__getLong__I;
      jmethodID Ljava_nio_ByteBuffer___putLong__J;
      jmethodID Ljava_nio_ByteBuffer___putLong__IJ;
      jmethodID F__getFloat;
      jmethodID F__getFloat__I;
      jmethodID Ljava_nio_ByteBuffer___putFloat__F;
      jmethodID Ljava_nio_ByteBuffer___putFloat__IF;
      jmethodID D__getDouble;
      jmethodID D__getDouble__I;
      jmethodID Ljava_nio_ByteBuffer___putDouble__D;
      jmethodID Ljava_nio_ByteBuffer___putDouble__ID;
      jmethodID Z__equals__Ljava_lang_Object_;
      jmethodID Ljava_lang_String___toString;
      jmethodID _B__array;
      jmethodID Ljava_lang_Object___array;
      jmethodID I__arrayOffset;
      jmethodID Z__hasArray;
      jmethodID Z__isDirect;
      jmethodID Ljava_nio_CharBuffer___asCharBuffer;
      jmethodID Ljava_nio_DoubleBuffer___asDoubleBuffer;
      jmethodID Ljava_nio_FloatBuffer___asFloatBuffer;
      jmethodID Ljava_nio_IntBuffer___asIntBuffer;
      jmethodID Ljava_nio_LongBuffer___asLongBuffer;
      jmethodID Ljava_nio_ByteBuffer___asReadOnlyBuffer;
      jmethodID Ljava_nio_ShortBuffer___asShortBuffer;
      jmethodID Ljava_nio_ByteBuffer___compact;
      jmethodID Ljava_nio_ByteBuffer___duplicate;
      jmethodID Ljava_nio_ByteOrder___order;
      jmethodID Ljava_nio_ByteBuffer___order__Ljava_nio_ByteOrder_;
      jmethodID Ljava_nio_ByteBuffer___slice;
      jmethodID I__limit;
      jmethodID Ljava_nio_Buffer___limit__I;
      jmethodID Ljava_nio_Buffer___clear;
      jmethodID I__position;
      jmethodID Ljava_nio_Buffer___position__I;
      jmethodID I__remaining;
      jmethodID I__capacity;
      jmethodID Ljava_nio_Buffer___flip;
      jmethodID Z__hasRemaining;
      jmethodID Z__isReadOnly;
      jmethodID Ljava_nio_Buffer___mark;
      jmethodID Ljava_nio_Buffer___reset;
      jmethodID Ljava_nio_Buffer___rewind;
      jmethodID V__wait__J;
      jmethodID V__wait__JI;
      jmethodID V__wait;
      jmethodID Ljava_lang_Class___getClass;
      jmethodID V__notify;
      jmethodID V__notifyAll;

   } method;

} jclass_java_nio_ByteBuffer;

// free structure
void free_jclass_java_nio_ByteBuffer(JNIEnv *env, jclass_java_nio_ByteBuffer *java_nio_ByteBuffer);

// alloc structure
jclass_java_nio_ByteBuffer *alloc_jclass_java_nio_ByteBuffer(JNIEnv *env);

